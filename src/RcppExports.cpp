// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// wasserstein_distance
double wasserstein_distance(const Rcpp::NumericMatrix& Diag1, const Rcpp::NumericMatrix& Diag2, int q, double internal_p, double delta, double initial_eps, double eps_factor);
RcppExport SEXP _kernelTDA_wasserstein_distance(SEXP Diag1SEXP, SEXP Diag2SEXP, SEXP qSEXP, SEXP internal_pSEXP, SEXP deltaSEXP, SEXP initial_epsSEXP, SEXP eps_factorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type Diag1(Diag1SEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type Diag2(Diag2SEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type internal_p(internal_pSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< double >::type initial_eps(initial_epsSEXP);
    Rcpp::traits::input_parameter< double >::type eps_factor(eps_factorSEXP);
    rcpp_result_gen = Rcpp::wrap(wasserstein_distance(Diag1, Diag2, q, internal_p, delta, initial_eps, eps_factor));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_kernelTDA_wasserstein_distance", (DL_FUNC) &_kernelTDA_wasserstein_distance, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_kernelTDA(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
